module SM (
	input [15:0] a_in,
	input [15:0] b_in,
	input [1:0] state,
	input en,					// Enable input
	input MSB,					// control input; HIGH if include the MSBs are to be calculated.
	output [7:0] a_mul,		// Operands to be multiplied (A[15:8]/A[7:0])
	output [7:0] b_mul,		// operands to be multiplied (B[15:8]/B[7:0])
	output reg [1:0] nextstate,	// Next State Output
	output shiften,			//	5 - Shifts the product 8 bits to the left.
	output backregload,		//	4 (LSB) - Write to the LSB register-GP3; but only if need the full MSB precision
	output frontregload,		// 3 (MSB) - Write to the MSB register-GP2
	output addcin,				// 2
	output [1:0] muxs,		// [1:0]. 00-GND; 01-cout; 10-front shifted 16 bits; 11-product.
	output reset,				// 6 - ACLR GP2 if we are using it to store the MSBs of the product. Should we leave this to the programmmer?
	output last					// 7
);

reg [7:0] out;		// Various control bits.
reg [7:0] a_tmp;
reg [7:0] b_tmp;
reg last_tmp;

always @*
begin
	case(state)
		2'b00: begin
			if (en) begin				// 00->01 to multiply first partial product, when EN is high
				a_tmp = a_in[15:8];
				b_tmp = b_in[7:0];
				nextstate = 2'b01;
				out = 8'b01010000;
			end else begin				// Nothing happens when EN is low.
				a_tmp = 16'b0;
				b_tmp = 16'b0;
				nextstate = 2'b00;
				out = 8'b10000000;
			end
			end
		
		2'b01: begin					// 01->10 to multiply other partial products.
			a_tmp = a_in[7:0];
			b_tmp = b_in[15:8];
			nextstate = 2'b10;
			out = 8'b00011001;
			end
			
		2'b10: begin					// Check if MSB is high. If the MSBs are required then move onto 11. Else go back to 00.
			a_tmp = a_in[7:0];
			b_tmp = b_in[7:0];
			nextstate = (2'b11&{2{MSB}});
			out[6:0] = 7'b0111110;
			out[7] = ~MSB;
			end
			
		2'b11: begin					// 11->00 always.
			a_tmp = a_in[15:8];
			b_tmp = b_in[15:8];
			nextstate = 2'b00;
			out = 8'b10001011;
			end
	endcase
end

assign a_mul = a_tmp;
assign b_mul = b_tmp;
assign reset = out[6];
assign shiften = out[5];
assign backregload = out[4];
assign frontregload = out[3];
assign addcin = out[2];
assign muxs = out[1:0];
assign last = out[7];

endmodule